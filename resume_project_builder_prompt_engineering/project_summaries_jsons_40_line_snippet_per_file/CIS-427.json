[
  {
    "repo": "CIS-427",
    "folder": "Programming Assignments\\P1\\CIS-427-P1-SocketProgram-DemetriusJ",
    "code_files": [
      "Programming Assignments\\P1\\CIS-427-P1-SocketProgram-DemetriusJ\\ClientSocket.cpp",
      "Programming Assignments\\P1\\CIS-427-P1-SocketProgram-DemetriusJ\\ServerSocket.cpp"
    ],
    "snippets": [
      {
        "file": "CIS-427\\Programming Assignments\\P1\\CIS-427-P1-SocketProgram-DemetriusJ\\ClientSocket.cpp",
        "snippet": "//Author: Demetrius Johnson\n//For: CIS-427 With Dr. Zheng Song at UM-Dearborn\n//Date created: 10-21-22\n//Date modified: 10-22-22\n//purpose: Create the client for the client-server socket programming application \n    //to get and update BANNER message of the day service ran on the remote server.\n\n#include <iostream>\n#include <Winsock2.h> //need this for socket programing in Windows\n#include <Ws2tcpip.h> //need this for updated functions that replace depracated functions (such as inet_addr() function)\n#define APP_SOCKET_PORT 5555\nusing namespace std;\n\n//this program's main function takes 1 commmandline parameter: server ip address as per the requirement for this assignment.\n\nint main(int argc, char** argv ) //remember: element 0 in the vector is the file name; first commandline argument begins at element 1\n{\n    WSADATA WSAData;\n    SOCKET serverSock; //note: SOCKET is a descriptor to identify SOCKADDR_IN structures; we will use serverSock/addr to connect to the server via IP address and TCP port#\n    SOCKADDR_IN addr;  // The sockaddr_in structure specifies the address family, IP address, and port of the server to be connected to.\n\n    WSAStartup(MAKEWORD(2,0), &WSAData);            //initiates use of the Winsock DLL by a process; we are using Winsock v 2.0 --> 2,0\n    serverSock = socket(AF_INET, SOCK_STREAM, 0);   //AF_INET specifies IPv4, SOCK_STREAM means use TCP, 0 means do not use a specific protocol (i.e. 1 = ICMP)\n    char ip_address[16] = \"127.0.0.1\";              //default ip will be loopback address of local machine\n\n    //only update IP with command line parameter if there is one present and if no more than 1 parameter has been passed in.\n    if (argc == 2)\n        strcpy_s(ip_address, argv[1]);\n\n    //inet_pton() function converts ASCII string to binary IP address to be stored in addr object --> assign the IP to the addr socket.\n    //AF_INET specifies IPV4 \n    //addr.sin_port = htons(port #) assigns port# to the addr socket.\n\n    //inet_pton() function will convert the IPv4 string into binary and store the address in the the struct in the proper field (replaces the depracated inet_addr() function)\n    inet_pton(AF_INET, ip_address, &addr.sin_addr.s_addr);\n\n    addr.sin_family = AF_INET;   \n    addr.sin_port = htons(APP_SOCKET_PORT);\n\n    connect(serverSock, (SOCKADDR*)&addr, sizeof(addr));   //try to connect to server using server IP and Port number we would like to connect on"
      },
      {
        "file": "CIS-427\\Programming Assignments\\P1\\CIS-427-P1-SocketProgram-DemetriusJ\\ServerSocket.cpp",
        "snippet": "//Author: Demetrius Johnson\n//For: CIS-427 With Dr. Zheng Song at UM-Dearborn\n//Date created: 10-21-22\n//Date modified: 10-22-22\n//purpose: Create the server for the client-server socket programming application \n    //to send and update BANNER message of the day service ran on the server.\n\n#include <iostream>\n#include <Winsock2.h> //need this for socket programing in Windows\n#include <Ws2tcpip.h> //need this for updated functions that replace depracated functions (such as inet_addr() function)\n#define APP_SOCKET_PORT 5555\nusing namespace std;\n\nint main()\n{\n    WSADATA WSAData;    //WinSock data structure\n\n    SOCKET serverSock, clientSock; //note: SOCKET is a descriptor to identify SOCKADDR_IN structures: use serverSock to listen to incoming connection requests; use clientSock for accepting incoming requests;\n                                   //We do this so that the server can listen and accept requests at the same time.\n\n    SOCKADDR_IN serverAddr, clientAddr;  // The sockaddr_in structure specifies the address family, IP address, and port of the server to be connected to.\n\n    int check_WSAStartup = WSAStartup(MAKEWORD(2, 0), &WSAData); //initiates use of the Winsock DLL by a process; we are using Winsock v 2.0 --> 2,0\n    if (check_WSAStartup != NO_ERROR) {\n    \n        wprintf(L\"WSAStartup function failed with error: %d\\n\", check_WSAStartup);\n        return 1;\n    }\n\n    //initialize socket and get descriptor\n    serverSock = socket(AF_INET, SOCK_STREAM, 0);\n\n    //socket initialization error checking:\n    if (serverSock == INVALID_SOCKET) {\n        wprintf(L\"socket function failed with error: %ld\\n\", WSAGetLastError());\n        WSACleanup();\n        return 1;\n    }"
      },
      {
        "file": "CIS-427\\Programming Assignments\\P1\\CIS-427-P1-SocketProgram-DemetriusJ\\P1 COMPLETE\\source code\\ClientSocket.cpp",
        "snippet": "//Author: Demetrius Johnson\n//For: CIS-427 With Dr. Zheng Song at UM-Dearborn\n//Date created: 10-21-22\n//Date modified: 10-22-22\n//purpose: Create the client for the client-server socket programming application \n    //to get and update BANNER message of the day service ran on the remote server.\n\n#include <iostream>\n#include <Winsock2.h> //need this for socket programing in Windows\n#include <Ws2tcpip.h> //need this for updated functions that replace depracated functions (such as inet_addr() function)\n#define APP_SOCKET_PORT 5555\nusing namespace std;\n\n//this program's main function takes 1 commmandline parameter: server ip address as per the requirement for this assignment.\n\nint main(int argc, char** argv ) //remember: element 0 in the vector is the file name; first commandline argument begins at element 1\n{\n    WSADATA WSAData;\n    SOCKET serverSock; //note: SOCKET is a descriptor to identify SOCKADDR_IN structures; we will use serverSock/addr to connect to the server via IP address and TCP port#\n    SOCKADDR_IN addr;  // The sockaddr_in structure specifies the address family, IP address, and port of the server to be connected to.\n\n    WSAStartup(MAKEWORD(2,0), &WSAData);            //initiates use of the Winsock DLL by a process; we are using Winsock v 2.0 --> 2,0\n    serverSock = socket(AF_INET, SOCK_STREAM, 0);   //AF_INET specifies IPv4, SOCK_STREAM means use TCP, 0 means do not use a specific protocol (i.e. 1 = ICMP)\n    char ip_address[16] = \"127.0.0.1\";              //default ip will be loopback address of local machine\n\n    //only update IP with command line parameter if there is one present and if no more than 1 parameter has been passed in.\n    if (argc == 2)\n        strcpy_s(ip_address, argv[1]);\n\n    //inet_pton() function converts ASCII string to binary IP address to be stored in addr object --> assign the IP to the addr socket.\n    //AF_INET specifies IPV4 \n    //addr.sin_port = htons(port #) assigns port# to the addr socket.\n\n    //inet_pton() function will convert the IPv4 string into binary and store the address in the the struct in the proper field (replaces the depracated inet_addr() function)\n    inet_pton(AF_INET, ip_address, &addr.sin_addr.s_addr);\n\n    addr.sin_family = AF_INET;   \n    addr.sin_port = htons(APP_SOCKET_PORT);\n\n    connect(serverSock, (SOCKADDR*)&addr, sizeof(addr));   //try to connect to server using server IP and Port number we would like to connect on"
      },
      {
        "file": "CIS-427\\Programming Assignments\\P1\\CIS-427-P1-SocketProgram-DemetriusJ\\P1 COMPLETE\\source code\\ServerSocket.cpp",
        "snippet": "//Author: Demetrius Johnson\n//For: CIS-427 With Dr. Zheng Song at UM-Dearborn\n//Date created: 10-21-22\n//Date modified: 10-22-22\n//purpose: Create the server for the client-server socket programming application \n    //to send and update BANNER message of the day service ran on the server.\n\n#include <iostream>\n#include <Winsock2.h> //need this for socket programing in Windows\n#include <Ws2tcpip.h> //need this for updated functions that replace depracated functions (such as inet_addr() function)\n#define APP_SOCKET_PORT 5555\nusing namespace std;\n\nint main()\n{\n    WSADATA WSAData;    //WinSock data structure\n\n    SOCKET serverSock, clientSock; //note: SOCKET is a descriptor to identify SOCKADDR_IN structures: use serverSock to listen to incoming connection requests; use clientSock for accepting incoming requests;\n                                   //We do this so that the server can listen and accept requests at the same time.\n\n    SOCKADDR_IN serverAddr, clientAddr;  // The sockaddr_in structure specifies the address family, IP address, and port of the server to be connected to.\n\n    int check_WSAStartup = WSAStartup(MAKEWORD(2, 0), &WSAData); //initiates use of the Winsock DLL by a process; we are using Winsock v 2.0 --> 2,0\n    if (check_WSAStartup != NO_ERROR) {\n    \n        wprintf(L\"WSAStartup function failed with error: %d\\n\", check_WSAStartup);\n        return 1;\n    }\n\n    //initialize socket and get descriptor\n    serverSock = socket(AF_INET, SOCK_STREAM, 0);\n\n    //socket initialization error checking:\n    if (serverSock == INVALID_SOCKET) {\n        wprintf(L\"socket function failed with error: %ld\\n\", WSAGetLastError());\n        WSACleanup();\n        return 1;\n    }"
      }
    ]
  },
  {
    "repo": "CIS-427",
    "folder": "Programming Assignments\\P1\\CIS-427-P1-SocketProgram-DemetriusJ\\P1 COMPLETE\\source code",
    "code_files": [
      "Programming Assignments\\P1\\CIS-427-P1-SocketProgram-DemetriusJ\\P1 COMPLETE\\source code\\ClientSocket.cpp",
      "Programming Assignments\\P1\\CIS-427-P1-SocketProgram-DemetriusJ\\P1 COMPLETE\\source code\\ServerSocket.cpp"
    ],
    "snippets": [
      {
        "file": "CIS-427\\Programming Assignments\\P1\\CIS-427-P1-SocketProgram-DemetriusJ\\P1 COMPLETE\\source code\\ClientSocket.cpp",
        "snippet": "//Author: Demetrius Johnson\n//For: CIS-427 With Dr. Zheng Song at UM-Dearborn\n//Date created: 10-21-22\n//Date modified: 10-22-22\n//purpose: Create the client for the client-server socket programming application \n    //to get and update BANNER message of the day service ran on the remote server.\n\n#include <iostream>\n#include <Winsock2.h> //need this for socket programing in Windows\n#include <Ws2tcpip.h> //need this for updated functions that replace depracated functions (such as inet_addr() function)\n#define APP_SOCKET_PORT 5555\nusing namespace std;\n\n//this program's main function takes 1 commmandline parameter: server ip address as per the requirement for this assignment.\n\nint main(int argc, char** argv ) //remember: element 0 in the vector is the file name; first commandline argument begins at element 1\n{\n    WSADATA WSAData;\n    SOCKET serverSock; //note: SOCKET is a descriptor to identify SOCKADDR_IN structures; we will use serverSock/addr to connect to the server via IP address and TCP port#\n    SOCKADDR_IN addr;  // The sockaddr_in structure specifies the address family, IP address, and port of the server to be connected to.\n\n    WSAStartup(MAKEWORD(2,0), &WSAData);            //initiates use of the Winsock DLL by a process; we are using Winsock v 2.0 --> 2,0\n    serverSock = socket(AF_INET, SOCK_STREAM, 0);   //AF_INET specifies IPv4, SOCK_STREAM means use TCP, 0 means do not use a specific protocol (i.e. 1 = ICMP)\n    char ip_address[16] = \"127.0.0.1\";              //default ip will be loopback address of local machine\n\n    //only update IP with command line parameter if there is one present and if no more than 1 parameter has been passed in.\n    if (argc == 2)\n        strcpy_s(ip_address, argv[1]);\n\n    //inet_pton() function converts ASCII string to binary IP address to be stored in addr object --> assign the IP to the addr socket.\n    //AF_INET specifies IPV4 \n    //addr.sin_port = htons(port #) assigns port# to the addr socket.\n\n    //inet_pton() function will convert the IPv4 string into binary and store the address in the the struct in the proper field (replaces the depracated inet_addr() function)\n    inet_pton(AF_INET, ip_address, &addr.sin_addr.s_addr);\n\n    addr.sin_family = AF_INET;   \n    addr.sin_port = htons(APP_SOCKET_PORT);\n\n    connect(serverSock, (SOCKADDR*)&addr, sizeof(addr));   //try to connect to server using server IP and Port number we would like to connect on"
      },
      {
        "file": "CIS-427\\Programming Assignments\\P1\\CIS-427-P1-SocketProgram-DemetriusJ\\P1 COMPLETE\\source code\\ServerSocket.cpp",
        "snippet": "//Author: Demetrius Johnson\n//For: CIS-427 With Dr. Zheng Song at UM-Dearborn\n//Date created: 10-21-22\n//Date modified: 10-22-22\n//purpose: Create the server for the client-server socket programming application \n    //to send and update BANNER message of the day service ran on the server.\n\n#include <iostream>\n#include <Winsock2.h> //need this for socket programing in Windows\n#include <Ws2tcpip.h> //need this for updated functions that replace depracated functions (such as inet_addr() function)\n#define APP_SOCKET_PORT 5555\nusing namespace std;\n\nint main()\n{\n    WSADATA WSAData;    //WinSock data structure\n\n    SOCKET serverSock, clientSock; //note: SOCKET is a descriptor to identify SOCKADDR_IN structures: use serverSock to listen to incoming connection requests; use clientSock for accepting incoming requests;\n                                   //We do this so that the server can listen and accept requests at the same time.\n\n    SOCKADDR_IN serverAddr, clientAddr;  // The sockaddr_in structure specifies the address family, IP address, and port of the server to be connected to.\n\n    int check_WSAStartup = WSAStartup(MAKEWORD(2, 0), &WSAData); //initiates use of the Winsock DLL by a process; we are using Winsock v 2.0 --> 2,0\n    if (check_WSAStartup != NO_ERROR) {\n    \n        wprintf(L\"WSAStartup function failed with error: %d\\n\", check_WSAStartup);\n        return 1;\n    }\n\n    //initialize socket and get descriptor\n    serverSock = socket(AF_INET, SOCK_STREAM, 0);\n\n    //socket initialization error checking:\n    if (serverSock == INVALID_SOCKET) {\n        wprintf(L\"socket function failed with error: %ld\\n\", WSAGetLastError());\n        WSACleanup();\n        return 1;\n    }"
      }
    ]
  },
  {
    "repo": "CIS-427",
    "folder": "Programming Assignments\\P1\\Linux_Basic_socket_c",
    "code_files": [
      "Programming Assignments\\P1\\Linux_Basic_socket_c\\ClientSocket_C.c",
      "Programming Assignments\\P1\\Linux_Basic_socket_c\\ServerSocket_C.c"
    ],
    "snippets": [
      {
        "file": "CIS-427\\Programming Assignments\\P1\\Linux_Basic_socket_c\\ClientSocket_C.c",
        "snippet": "#include <sys/socket.h>\n#include <sys/types.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <errno.h>\n#include <arpa/inet.h> \n\nint main()\n{\n    int serverSock = 0;\n    \n\n    struct sockaddr_in addr;\n    serverSock = socket(AF_INET, SOCK_STREAM, 0);\n\n   \n    addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(5555);\n\n    connect(serverSock, (struct sockaddr *)&addr, sizeof(addr));\n    printf(\"Connected to server! \\n\");\n    char buffer[1025];\n    int val;\n\n    if((val = read(serverSock, buffer,1024)) != 0)\n\t{\n\t\tbuffer[val] = '\\0';\n\t\tprintf(\"Read successful and buffer read is %s \\n\", buffer);\n\t}\n/*    char buffer[1024]={'h', 'e', 'l', 'l', 'o', '.'};*/\n\n//    write(serverSock, buffer, strlen(buffer));\n//    printf(\"Message sent! with buffer is %s in Client\\n\", buffer);\n\n    close(serverSock);"
      },
      {
        "file": "CIS-427\\Programming Assignments\\P1\\Linux_Basic_socket_c\\ServerSocket_C.c",
        "snippet": "#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/types.h>\n\n\nint main()\n{\n    int server = 0, client = 0;//Linux specifix\n    struct sockaddr_in serverAddr;//linux specific\n    char * message = \"Hello dear \\r\\n\";\n\n    server = socket(AF_INET, SOCK_STREAM, 0);\n\n    serverAddr.sin_addr.s_addr = INADDR_ANY;\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(5555);\n\n    bind(server, (struct sockaddr*)&serverAddr, sizeof(serverAddr));\n    listen(server, 0);\n\n    \n    printf(\"Listening for incoming connections...\\n\");\n\n  //  char buffer[1024];\n  \n\t\n    client = accept(server, (struct sockaddr*)NULL, NULL);\n    printf(\"Client connected! \\n\");\n//    read(client, buffer, sizeof(buffer)-1);\n\n  //  printf(\"client says: buffer is %s \\n\", buffer);\nprintf(\"before calling send in server \\n\");\n    if(send(client, message, strlen(message),0) != strlen(message))\n    {"
      }
    ]
  },
  {
    "repo": "CIS-427",
    "folder": "Programming Assignments\\P1\\Linux_Basic_socket_cpp",
    "code_files": [
      "Programming Assignments\\P1\\Linux_Basic_socket_cpp\\ClientSocket_C++.cpp",
      "Programming Assignments\\P1\\Linux_Basic_socket_cpp\\ServerSocket_C++.cpp"
    ],
    "snippets": [
      {
        "file": "CIS-427\\Programming Assignments\\P1\\Linux_Basic_socket_cpp\\ClientSocket_C++.cpp",
        "snippet": "#include <sys/socket.h>\n#include <sys/types.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <errno.h>\n#include <arpa/inet.h> \n#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    int serverSock = 0;\n    \n\n    struct sockaddr_in addr;\n    serverSock = socket(AF_INET, SOCK_STREAM, 0);\n\n   \n    addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(5555);\n\n    connect(serverSock, (struct sockaddr *)&addr, sizeof(addr));\n    cout<< \"Connected to server!\"<< endl;\n    char buffer[1024]={'h', 'e', 'l', 'l', 'o', '.'};\n    write(serverSock, buffer, strlen(buffer));\n    cout<<\"Message sent! with buffer in Client\"<< buffer << endl;\n\n    close(serverSock);\n   \n    cout<<\"Socket closed.\"<< endl;\n\t\n}"
      },
      {
        "file": "CIS-427\\Programming Assignments\\P1\\Linux_Basic_socket_cpp\\ServerSocket_C++.cpp",
        "snippet": "#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/types.h>\n#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    int server = 0, client = 0;//Linux specifix\n    struct sockaddr_in serverAddr;//linux specific\n\n    server = socket(AF_INET, SOCK_STREAM, 0);\n\n    serverAddr.sin_addr.s_addr = INADDR_ANY;\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(5555);\n\n    bind(server, (struct sockaddr*)&serverAddr, sizeof(serverAddr));\n    listen(server, 0);\n\n    \n    cout<<\"Listening for incoming connections...\"<<endl;\n\n    char buffer[1024] = { 0 };\n  \n\t\n    client = accept(server, (struct sockaddr*)NULL, NULL);\n    cout<<\"Client connected!\" << endl;\n    read(client, buffer, sizeof(buffer)-1);\n\n    cout<<\"client says: buffer is \" << buffer <<endl;\n        \t\n    memset(buffer, 0, sizeof(buffer));"
      }
    ]
  },
  {
    "repo": "CIS-427",
    "folder": "Programming Assignments\\P1\\P1 COMPLETE\\source code",
    "code_files": [
      "Programming Assignments\\P1\\P1 COMPLETE\\source code\\ClientSocket.cpp",
      "Programming Assignments\\P1\\P1 COMPLETE\\source code\\ServerSocket.cpp"
    ],
    "snippets": [
      {
        "file": "CIS-427\\Programming Assignments\\P1\\P1 COMPLETE\\source code\\ClientSocket.cpp",
        "snippet": "//Author: Demetrius Johnson\n//For: CIS-427 With Dr. Zheng Song at UM-Dearborn\n//Date created: 10-21-22\n//Date modified: 10-22-22\n//purpose: Create the client for the client-server socket programming application \n    //to get and update BANNER message of the day service ran on the remote server.\n\n#include <iostream>\n#include <Winsock2.h> //need this for socket programing in Windows\n#include <Ws2tcpip.h> //need this for updated functions that replace depracated functions (such as inet_addr() function)\n#define APP_SOCKET_PORT 5555\nusing namespace std;\n\n//this program's main function takes 1 commmandline parameter: server ip address as per the requirement for this assignment.\n\nint main(int argc, char** argv ) //remember: element 0 in the vector is the file name; first commandline argument begins at element 1\n{\n    WSADATA WSAData;\n    SOCKET serverSock; //note: SOCKET is a descriptor to identify SOCKADDR_IN structures; we will use serverSock/addr to connect to the server via IP address and TCP port#\n    SOCKADDR_IN addr;  // The sockaddr_in structure specifies the address family, IP address, and port of the server to be connected to.\n\n    WSAStartup(MAKEWORD(2,0), &WSAData);            //initiates use of the Winsock DLL by a process; we are using Winsock v 2.0 --> 2,0\n    serverSock = socket(AF_INET, SOCK_STREAM, 0);   //AF_INET specifies IPv4, SOCK_STREAM means use TCP, 0 means do not use a specific protocol (i.e. 1 = ICMP)\n    char ip_address[16] = \"127.0.0.1\";              //default ip will be loopback address of local machine\n\n    //only update IP with command line parameter if there is one present and if no more than 1 parameter has been passed in.\n    if (argc == 2)\n        strcpy_s(ip_address, argv[1]);\n\n    //inet_pton() function converts ASCII string to binary IP address to be stored in addr object --> assign the IP to the addr socket.\n    //AF_INET specifies IPV4 \n    //addr.sin_port = htons(port #) assigns port# to the addr socket.\n\n    //inet_pton() function will convert the IPv4 string into binary and store the address in the the struct in the proper field (replaces the depracated inet_addr() function)\n    inet_pton(AF_INET, ip_address, &addr.sin_addr.s_addr);\n\n    addr.sin_family = AF_INET;   \n    addr.sin_port = htons(APP_SOCKET_PORT);\n\n    connect(serverSock, (SOCKADDR*)&addr, sizeof(addr));   //try to connect to server using server IP and Port number we would like to connect on"
      },
      {
        "file": "CIS-427\\Programming Assignments\\P1\\P1 COMPLETE\\source code\\ServerSocket.cpp",
        "snippet": "//Author: Demetrius Johnson\n//For: CIS-427 With Dr. Zheng Song at UM-Dearborn\n//Date created: 10-21-22\n//Date modified: 10-22-22\n//purpose: Create the server for the client-server socket programming application \n    //to send and update BANNER message of the day service ran on the server.\n\n#include <iostream>\n#include <Winsock2.h> //need this for socket programing in Windows\n#include <Ws2tcpip.h> //need this for updated functions that replace depracated functions (such as inet_addr() function)\n#define APP_SOCKET_PORT 5555\nusing namespace std;\n\nint main()\n{\n    WSADATA WSAData;    //WinSock data structure\n\n    SOCKET serverSock, clientSock; //note: SOCKET is a descriptor to identify SOCKADDR_IN structures: use serverSock to listen to incoming connection requests; use clientSock for accepting incoming requests;\n                                   //We do this so that the server can listen and accept requests at the same time.\n\n    SOCKADDR_IN serverAddr, clientAddr;  // The sockaddr_in structure specifies the address family, IP address, and port of the server to be connected to.\n\n    int check_WSAStartup = WSAStartup(MAKEWORD(2, 0), &WSAData); //initiates use of the Winsock DLL by a process; we are using Winsock v 2.0 --> 2,0\n    if (check_WSAStartup != NO_ERROR) {\n    \n        wprintf(L\"WSAStartup function failed with error: %d\\n\", check_WSAStartup);\n        return 1;\n    }\n\n    //initialize socket and get descriptor\n    serverSock = socket(AF_INET, SOCK_STREAM, 0);\n\n    //socket initialization error checking:\n    if (serverSock == INVALID_SOCKET) {\n        wprintf(L\"socket function failed with error: %ld\\n\", WSAGetLastError());\n        WSACleanup();\n        return 1;\n    }"
      }
    ]
  },
  {
    "repo": "CIS-427",
    "folder": "Programming Assignments\\P1\\Windows_Basic_socket_cpp",
    "code_files": [
      "Programming Assignments\\P1\\Windows_Basic_socket_cpp\\ClientSocket_SourceCode_C++.cpp",
      "Programming Assignments\\P1\\Windows_Basic_socket_cpp\\ServerSocket_SourceCode_C++.cpp"
    ],
    "snippets": [
      {
        "file": "CIS-427\\Programming Assignments\\P1\\Windows_Basic_socket_cpp\\ClientSocket_SourceCode_C++.cpp",
        "snippet": "#include <iostream>\n#include <winsock2.h>\n\nusing namespace std;\n\nint main()\n{\n    WSADATA WSAData;\n    SOCKET serverSock;\n    SOCKADDR_IN addr;\n\n    WSAStartup(MAKEWORD(2,0), &WSAData);\n    serverSock = socket(AF_INET, SOCK_STREAM, 0);\n\n    //addr.sin_addr.s_addr = inet_addr(\"192.168.0.8\"); // replace the ip with your futur server ip address. If server AND client are running on the same computer, you can use the local ip 127.0.0.1\n    addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(5555);\n\n    connect(serverSock, (SOCKADDR *)&addr, sizeof(addr));\n    cout << \"Connected to server!\" << endl;\n\n    char buffer[1024]={'h', 'e', 'l', 'l', 'o', '.'};\n    send(serverSock, buffer, sizeof(buffer), 0);\n    cout << \"Message sent!\" << endl;\n\n    closesocket(serverSock);\n    WSACleanup();\n    cout << \"Socket closed.\" << endl << endl;\n}"
      },
      {
        "file": "CIS-427\\Programming Assignments\\P1\\Windows_Basic_socket_cpp\\ServerSocket_SourceCode_C++.cpp",
        "snippet": "#include <iostream>\n#include <winsock2.h>\n\nusing namespace std;\n\nint main()\n{\n    WSADATA WSAData;\n\n    SOCKET serverSock, clientSock;\n\n    SOCKADDR_IN serverAddr, clientAddr;\n\n    WSAStartup(MAKEWORD(2,0), &WSAData);\n    serverSock = socket(AF_INET, SOCK_STREAM, 0);\n\n    serverAddr.sin_addr.s_addr = INADDR_ANY;\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(5555);\n\n    bind(serverSock, (SOCKADDR *)&serverAddr, sizeof(serverAddr));\n    listen(serverSock, 0);\n\n    cout << \"Listening for incoming connections...\" << endl;\n\n    char buffer[1024];\n    int clientAddrSize = sizeof(clientAddr);\n    if((clientSock = accept(serverSock, (SOCKADDR *)&clientAddr, &clientAddrSize)) != INVALID_SOCKET)\n    {\n        cout << \"Client connected!\" << endl;\n        recv(clientSock, buffer, sizeof(buffer), 0);\n        cout << \"Client says: \" << buffer << endl;\n        memset(buffer, 0, sizeof(buffer));\n\n        closesocket(clientSock);\n        cout << \"Client disconnected.\" << endl;\n    }\n}"
      }
    ]
  }
]